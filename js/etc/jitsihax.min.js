function clamp(t,i,e){return Math.min(e,Math.max(i,t))}function project(t,i,e){return(t-i)/(e-i)}class BaseSpatializer{constructor(t,i,e,s){this.destination=t,this.audio=i,this.analyser=e,this.node=s,this.node.connect(this.destination.audioContext.destination),this.source=null}checkStream(){if(!this.source)try{const t=this.audio.mozCaptureStream?this.audio.mozCaptureStream():this.audio.captureStream();this.source=this.destination.audioContext.createMediaStreamSource(t),this.source.connect(this.analyser),this.source.connect(this.node)}catch(t){return console.warn("Source isn't available yet. Will retry in a moment. Reason: ",t),!1}return!0}dispose(){this.source&&(this.source.disconnect(this.analyser),this.source.disconnect(this.node),this.source=null),this.node.disconnect(this.destination.audioContext.destination),this.node=null,this.audio=null,this.destination=null}update(){}setAudioProperties(t){throw new Error("Not implemented in base class.")}setPosition(t){throw new Error("Not implemented in base class.")}get positionX(){throw new Error("Not implemented in base class.")}get positionY(){throw new Error("Not implemented in base class.")}}class FullSpatializer extends BaseSpatializer{constructor(t,i,e){super(t,i,e,t.audioContext.createPanner()),this.node.panningModel="HRTF",this.node.distanceModel="inverse",this.node.refDistance=t.minDistance,this.node.rolloffFactor=t.rolloff,this.node.coneInnerAngle=360,this.node.coneOuterAngle=0,this.node.coneOuterGain=0,this.node.positionY.setValueAtTime(0,this.destination.audioContext.currentTime),this.wasMuted=!1}setAudioProperties(t){this.node.refDistance=t.minDistance,this.node.rolloffFactor=t.rolloff}setPosition(t){const i=this.destination.audioContext.currentTime+this.destination.transitionTime;this.node.positionX.linearRampToValueAtTime(t.x,i),this.node.positionZ.linearRampToValueAtTime(t.y,i)}get positionX(){return this.node.positionX.value}get positionY(){return this.node.positionZ.value}update(){if(this.source){const t=this.destination.positionX,i=this.destination.positionY,e=this.positionX-t,s=this.positionY-i,n=clamp(project(Math.sqrt(e*e+s*s),this.destination.minDistance,this.destination.maxDistance),0,1)>=1;n!==this.wasMuted&&(this.wasMuted=n,n?this.source.disconnect(this.node):this.source.connect(this.node))}}}const audioActivityEvt=Object.assign(new Event("audioActivity",{id:null,isActive:!1})),activityCounterMin=0,activityCounterMax=60,activityCounterThresh=5;function frequencyToIndex(t,i,e){var s=i/2;return clamp(Math.round(t/s*e),0,e)}function analyserFrequencyAverage(t,i,e,s,n){const o=t.context.sampleRate,a=frequencyToIndex(e,o,n),r=frequencyToIndex(s,o,n),u=r-a;let h=0;for(let t=a;t<r;++t)h+=i[t];return 0===u?0:h/u}class Source extends EventTarget{constructor(t,i,e,s){super(),this.id=t,this.lastAudible=!0,this.activityCounter=0,this.wasActive=!1,this.destination=e,this.audio=i,this.audio.volume=0,this.bufferSize=s,this.buffer=new Float32Array(this.bufferSize),this.analyser=this.destination.audioContext.createAnalyser(),this.analyser.fftSize=2*this.bufferSize,this.analyser.smoothingTimeConstant=.2,this.spatializer=new FullSpatializer(this.destination,this.audio,this.analyser),Object.seal(this)}dispose(){this.spatializer.dispose(),this.audio.pause(),this.spatializer=null,this.destination=null,this.audio=null,this.analyser=null,this.buffer=null}setAudioProperties(t){this.spatializer.setAudioProperties(t)}setPosition(t){this.spatializer.setPosition(t)}update(){if(this.spatializer.checkStream()){this.spatializer.update(),this.analyser.getFloatFrequencyData(this.buffer);const t=1.1+analyserFrequencyAverage(this.analyser,this.buffer,85,255,this.bufferSize)/100;t>=.5&&this.activityCounter<60?this.activityCounter++:t<.5&&this.activityCounter>0&&this.activityCounter--;const i=this.activityCounter>5;this.wasActive!==i&&(this.wasActive=i,audioActivityEvt.id=this.id,audioActivityEvt.isActive=i,this.dispatchEvent(audioActivityEvt))}}}const isOldAudioAPI=!AudioListener.prototype.hasOwnProperty("positionX");class Destination{constructor(){if(this.audioContext=new AudioContext,this.listener=this.audioContext.listener,this.minDistance=1,this.maxDistance=10,this.rolloff=1,this.transitionTime=.125,isOldAudioAPI)this.startMoveTime=this.endMoveTime=0,this.listenerX=this.targetListenerX=this.startListenerX=0,this.listenerY=this.targetListenerY=this.startListenerY=0,this.listener.setPosition(0,0,0),this.listener.setOrientation(0,0,-1,0,1,0);else{const t=this.audioContext.currentTime;this.listener.positionX.setValueAtTime(0,t),this.listener.positionY.setValueAtTime(0,t),this.listener.positionZ.setValueAtTime(0,t),this.listener.forwardX.setValueAtTime(0,t),this.listener.forwardY.setValueAtTime(0,t),this.listener.forwardZ.setValueAtTime(-1,t),this.listener.upX.setValueAtTime(0,t),this.listener.upY.setValueAtTime(1,t),this.listener.upZ.setValueAtTime(0,t)}}get positionX(){return isOldAudioAPI?this.listenerX:this.audioContext.listener.positionX.value}get positionY(){return isOldAudioAPI?this.listenerY:this.audioContext.listener.positionZ.value}setPosition(t){const i=this.audioContext.currentTime+this.transitionTime;isOldAudioAPI?(this.startMoveTime=this.audioContext.currentTime,this.endMoveTime=i,this.startListenerX=this.listenerX,this.startListenerY=this.listenerY,this.targetListenerX=t.x,this.targetListenerY=t.y):(this.listener.positionX.linearRampToValueAtTime(t.x,i),this.listener.positionZ.linearRampToValueAtTime(t.y,i))}setAudioProperties(t){this.minDistance=t.minDistance,this.maxDistance=t.maxDistance,this.transitionTime=t.transitionTime,this.rolloff=t.rolloff}update(){if(isOldAudioAPI){const t=project(this.audioContext.currentTime,this.startMoveTime,this.endMoveTime);if(t<=1){const i=this.targetListenerX-this.startListenerX,e=this.targetListenerY-this.startListenerY;this.listenerX=this.startListenerX+t*i,this.listenerY=this.startListenerY+t*e,this.listener.setPosition(this.listenerX,0,this.listenerY)}}}}const BUFFER_SIZE=1024,audioActivityEvt$1=Object.assign(new Event("audioActivity",{id:null,isActive:!1}));class AudioManager extends EventTarget{constructor(){super(),this.sourceLookup={},this.sourceList=[],this.destination=new Destination,this.updater=()=>{requestAnimationFrame(this.updater),this.destination.update();for(let t of this.sourceList)t.update()},requestAnimationFrame(this.updater)}getSource(t){if(!this.sourceLookup[t]){const i=`#participant_${t} audio`,e=document.querySelector(i);if(e){const i=this.sourceLookup[t]=new Source(t,e,this.destination,1024);i.addEventListener("audioActivity",t=>{audioActivityEvt$1.id=t.id,audioActivityEvt$1.isActive=t.isActive,this.dispatchEvent(audioActivityEvt$1)}),this.sourceList.push(i)}}const i=this.sourceLookup[t];return i||console.warn("no audio for user "+t),i}setUserPosition(t){const i=this.getSource(t.id);i&&i.setPosition(t)}setLocalPosition(t){this.destination.setPosition(t)}setAudioProperties(t){this.destination.setAudioProperties(t);for(let i of this.sourceList)i.setAudioProperties(t)}removeUser(t){const i=this.sourceLookup[t.id];if(i){const e=this.sourceList.indexOf(i);e>-1&&this.sourceList.splice(e,1),i.dispose(),delete this.sourceLookup[t.id]}}}const FRONT_END_SERVER="https://www.calla.chat",APP_FINGERPRINT="Calla",manager=new AudioManager;let origin=null;function txJitsiHax(t,i){if(null!==origin){const e={hax:"Calla",command:t,value:i};window.parent.postMessage(JSON.stringify(e),origin)}}manager.addEventListener("audioActivity",t=>{txJitsiHax("audioActivity",{id:t.id,isActive:t.isActive})}),window.addEventListener("message",t=>{const i=t.origin.match(/^https?:\/\/localhost\b/);if(t.origin===FRONT_END_SERVER||i)try{const i=JSON.parse(t.data);"Calla"===i.hax&&manager[i.command]&&(manager[i.command](i.value),"setAudioProperties"===i.command&&(origin=i.origin))}catch(t){console.error(t)}});
